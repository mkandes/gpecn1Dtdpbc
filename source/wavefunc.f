! ======================================================================
! NAME
!
!     WAVEFUNC
!
! DESCRIPTION
!
!     WAVEFUNC is a supporting program of GPECN1DTDPBC that generates 
!     the initial state wave functions for its simulations.
!
! AUTHOR
!
!     Marty Kandes, Ph.D.
!     Computational & Data Science Research Specialist
!     User Services Group
!     San Diego Supercomputer Center
!     University of California, San Diego
!
! COPYRIGHT
!     
!     Copyright (c) 2010, 2011, 2017 Martin Charles Kandes
!
! LICENSE
!
!     The MIT License (MIT)
!
! LAST UPDATED
!
!     Tuesday, April 4th, 2017                                   
!
! ----------------------------------------------------------------------
      PROGRAM WAVEFUNC
      IMPLICIT NONE

!     Parameter Declarations:
!     -----------------------
      REAL, PARAMETER :: PI = 3.1415926535897932384626433832795028841971E0

!     Input Variable and Array Declarations:
!     --------------------------------------
      INTEGER :: NUMBER_OF_GRID_POINTS
      INTEGER :: WAVEFUNCTION_SWITCH
      INTEGER :: ANGULAR_MOMENTUM_1
      INTEGER :: ANGULAR_MOMENTUM_2

      REAL :: RADIUS
      REAL :: ROTATION_RATE
      REAL :: GAUSSIAN_OSCILLATOR_STRENGTH
      REAL :: INITIAL_ANGULAR_POSITION
      REAL :: ANGULAR_WAVEVECTOR
      REAL :: AMPLITUDE_1
      REAL :: AMPLITUDE_2
      REAL :: INITIAL_PHASE_1
      REAL :: INITIAL_PHASE_2

!     Internal Variable and Array Declarations:
!     -----------------------------------------
      CHARACTER(80) :: BUFFER

      INTEGER :: CURRENT_GRID_POINT
      INTEGER :: LENGTH
      INTEGER :: INFO

      REAL :: ANGULAR_GRID_SPACING_SIZE
      REAL :: NORMALIZATION_FACTOR

      COMPLEX, ALLOCATABLE, DIMENSION(:) :: WAVEFUNCTION

!     Input Variable Assignment Read from Command-line Arguments:
!     -----------------------------------------------------------
      CALL GET_COMMAND_ARGUMENT(1,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) NUMBER_OF_GRID_POINTS

      CALL GET_COMMAND_ARGUMENT(2,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) WAVEFUNCTION_SWITCH

      CALL GET_COMMAND_ARGUMENT(3,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) RADIUS

      CALL GET_COMMAND_ARGUMENT(4,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) ROTATION_RATE

      CALL GET_COMMAND_ARGUMENT(5,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) GAUSSIAN_OSCILLATOR_STRENGTH

      CALL GET_COMMAND_ARGUMENT(6,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) INITIAL_ANGULAR_POSITION

      CALL GET_COMMAND_ARGUMENT(7,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) AMPLITUDE_1

      CALL GET_COMMAND_ARGUMENT(8,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) ANGULAR_MOMENTUM_1

      CALL GET_COMMAND_ARGUMENT(9,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) ANGULAR_MOMENTUM_2

      CALL GET_COMMAND_ARGUMENT(10,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) INITIAL_PHASE_1

      CALL GET_COMMAND_ARGUMENT(11,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) INITIAL_PHASE_2

      WRITE(6,*) NUMBER_OF_GRID_POINTS
      WRITE(6,*) WAVEFUNCTION_SWITCH
      WRITE(6,*) RADIUS
      WRITE(6,*) ROTATION_RATE
      WRITE(6,*) GAUSSIAN_OSCILLATOR_STRENGTH
      WRITE(6,*) INITIAL_ANGULAR_POSITION
      WRITE(6,*) AMPLITUDE_1
      WRITE(6,*) ANGULAR_MOMENTUM_1
      WRITE(6,*) ANGULAR_MOMENTUM_2
      WRITE(6,*) INITIAL_PHASE_1
      WRITE(6,*) INITIAL_PHASE_2

!     Allocate Arrays:
!     ----------------
      ALLOCATE(WAVEFUNCTION(NUMBER_OF_GRID_POINTS))

!     Internal Variable Assignment:
!     -----------------------------
      ANGULAR_GRID_SPACING_SIZE = 2.0E0*PI/FLOAT(NUMBER_OF_GRID_POINTS)

!     Initializations:
!     ----------------
      AMPLITUDE_2 = SQRT(1.0E0-AMPLITUDE_1**2)

!     Main Program:
!     -------------
      IF (WAVEFUNCTION_SWITCH.EQ.0) THEN
         DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
            WAVEFUNCTION(CURRENT_GRID_POINT) = CMPLX(SQRT(SQRT(GAUSSIAN_OSCILLATOR_STRENGTH/PI)),0.0E0)*EXP(CMPLX(-0.5E0*GAUSSIAN_OSCILLATOR_STRENGTH*RADIUS**2*(FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE-INITIAL_ANGULAR_POSITION)**2,ROTATION_RATE*RADIUS**2*(FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE-INITIAL_ANGULAR_POSITION)))
            WAVEFUNCTION(CURRENT_GRID_POINT) = CMPLX(AMPLITUDE_1,0.0E0)*WAVEFUNCTION(CURRENT_GRID_POINT)*EXP(CMPLX(0.0E0,FLOAT(ANGULAR_MOMENTUM_1)*(FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE-INITIAL_ANGULAR_POSITION)))+CMPLX(AMPLITUDE_2,0.0E0)*WAVEFUNCTION(CURRENT_GRID_POINT)*EXP(CMPLX(0.0E0,FLOAT(ANGULAR_MOMENTUM_2)*(FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE-INITIAL_ANGULAR_POSITION)))
         ENDDO
      ELSEIF (WAVEFUNCTION_SWITCH.EQ.1) THEN
         DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
            WAVEFUNCTION(CURRENT_GRID_POINT) = CMPLX(1.0E0/SQRT(2.0E0*PI*RADIUS),0.0E0)*(CMPLX(AMPLITUDE_1,0.0E0)*EXP(CMPLX(0.0E0,FLOAT(ANGULAR_MOMENTUM_1)*FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE+INITIAL_PHASE_1))+CMPLX(AMPLITUDE_2,0.0E0)*EXP(CMPLX(0.0E0,FLOAT(ANGULAR_MOMENTUM_2)*FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE+INITIAL_PHASE_2)))
         ENDDO
      ENDIF
  
      NORMALIZATION_FACTOR = 0.0E0
      DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
         NORMALIZATION_FACTOR = NORMALIZATION_FACTOR+ABS(WAVEFUNCTION(CURRENT_GRID_POINT))**2*RADIUS*ANGULAR_GRID_SPACING_SIZE
      ENDDO
      WAVEFUNCTION = CMPLX(1.0E0/SQRT(NORMALIZATION_FACTOR))*WAVEFUNCTION

      OPEN(UNIT=1000,ACTION='WRITE',FORM='UNFORMATTED')
      WRITE(UNIT=1000) WAVEFUNCTION
      CLOSE(UNIT=1000)

!     Deallocate Arrays:
!     ------------------
      DEALLOCATE(WAVEFUNCTION)

      STOP
      ENDPROGRAM WAVEFUNC
! ======================================================================
