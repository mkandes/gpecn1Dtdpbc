! ======================================================================
! NAME
!
!     EXPECTATION
!
! DESCRIPTION
!
!     EXPECTATION is a supporting program of GPECN1DTDPBC that computes 
!     the expectation values of different physical quantities from its 
!     output wave functions.
!
! AUTHOR
!
!     Marty Kandes, Ph.D.
!     Computational & Data Science Research Specialist
!     User Services Group
!     San Diego Supercomputer Center
!     University of California, San Diego
!
! COPYRIGHT
!     
!     Copyright (c) 2010, 2011, 2017 Martin Charles Kandes
!
! LICENSE
!
!     The MIT License (MIT)
!
! LAST UPDATED
!
!     Wednesday, April 11th, 2017                                   
!
! ----------------------------------------------------------------------
      PROGRAM EXPECTATION
      IMPLICIT NONE

!     Parameter Declarations:
!     -----------------------
      REAL, PARAMETER :: PI = 3.1415926535897932384626433832795028841971E0

!     Input Variable and Array Declarations:
!     --------------------------------------
      INTEGER :: NUMBER_OF_GRID_POINTS
      INTEGER :: NUMBER_OF_TIME_STEPS
      INTEGER :: NUMBER_OF_TIME_STEPS_BEFORE_WRITE

      REAL :: RADIUS
      REAL :: ROTATION_RATE
      REAL :: GAMMA_FACTOR

      COMPLEX, ALLOCATABLE, DIMENSION(:) :: WAVEFUNCTION
      COMPLEX, ALLOCATABLE, DIMENSION(:) :: EXTERNAL_POTENTIAL
      COMPLEX, ALLOCATABLE, DIMENSION(:) :: NONLINEAR_COUPLING

!     Internal Variable and Array Declarations:
!     -----------------------------------------
      CHARACTER(80) :: BUFFER

      INTEGER :: CURRENT_GRID_POINT
      INTEGER :: CURRENT_TIME_STEP
      INTEGER :: CURRENT_FILE
      INTEGER :: LENGTH
      INTEGER :: INFO

      REAL :: ANGULAR_GRID_SPACING_SIZE
      REAL :: TIME_STEP_SIZE
      REAL :: L2NORM
      REAL :: ENERGY
      REAL :: ANGULAR_MOMENTUM
      REAL :: ANGULAR_POSITION

!     Input Variable Assignment Read from Command-line Arguments:
!     -----------------------------------------------------------
      CALL GET_COMMAND_ARGUMENT(1,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) NUMBER_OF_GRID_POINTS

      CALL GET_COMMAND_ARGUMENT(2,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) NUMBER_OF_TIME_STEPS

      CALL GET_COMMAND_ARGUMENT(3,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) NUMBER_OF_TIME_STEPS_BEFORE_WRITE

      CALL GET_COMMAND_ARGUMENT(4,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) RADIUS

      CALL GET_COMMAND_ARGUMENT(5,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) ROTATION_RATE

      CALL GET_COMMAND_ARGUMENT(6,BUFFER,LENGTH,INFO)
      READ(BUFFER,*) GAMMA_FACTOR

!     Allocate Arrays:
!     ----------------
      ALLOCATE(WAVEFUNCTION(NUMBER_OF_GRID_POINTS))
      ALLOCATE(EXTERNAL_POTENTIAL(NUMBER_OF_GRID_POINTS))
      ALLOCATE(NONLINEAR_COUPLING(NUMBER_OF_GRID_POINTS))

!     Internal Variable Assignment:
!     -----------------------------
      ANGULAR_GRID_SPACING_SIZE = 2.0E0*PI/FLOAT(NUMBER_OF_GRID_POINTS)
      TIME_STEP_SIZE = (RADIUS*ANGULAR_GRID_SPACING_SIZE)**2/(2.0E0*GAMMA_FACTOR)

!     Read Input Arrays from File:
!     ----------------------------
      OPEN(UNIT=999,ACTION='READ',FORM='UNFORMATTED')
      READ(UNIT=999) EXTERNAL_POTENTIAL
      CLOSE(UNIT=999)

      OPEN(UNIT=998,ACTION='READ',FORM='UNFORMATTED')
      READ(UNIT=998) NONLINEAR_COUPLING
      CLOSE(UNIT=998)


!     Initializations:
!     ----------------
      CURRENT_FILE = 1000

!     Main Program Loop:
!     ------------------
      DO CURRENT_TIME_STEP = 1, NUMBER_OF_TIME_STEPS+1, NUMBER_OF_TIME_STEPS_BEFORE_WRITE
         OPEN(UNIT=CURRENT_FILE,ACTION='READ',FORM='UNFORMATTED')
         READ(UNIT=CURRENT_FILE) WAVEFUNCTION
         CLOSE(UNIT=CURRENT_FILE)
         L2NORM = 0.0E0
         DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
            L2NORM = L2NORM+ABS(WAVEFUNCTION(CURRENT_GRID_POINT))**2
         ENDDO
         L2NORM = L2NORM*RADIUS*ANGULAR_GRID_SPACING_SIZE
         ENERGY = 0.0E0
         ENERGY = ENERGY+REAL(CONJG(WAVEFUNCTION(1))*(WAVEFUNCTION(2)-CMPLX(2.0E0,0.0E0)*WAVEFUNCTION(1)+WAVEFUNCTION(NUMBER_OF_GRID_POINTS)))
         DO CURRENT_GRID_POINT = 2, NUMBER_OF_GRID_POINTS-1
            ENERGY = ENERGY+REAL(CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*(WAVEFUNCTION(CURRENT_GRID_POINT+1)-CMPLX(2.0E0,0.0E0)*WAVEFUNCTION(CURRENT_GRID_POINT)+WAVEFUNCTION(CURRENT_GRID_POINT-1)))
         ENDDO
         ENERGY = ENERGY+REAL(CONJG(WAVEFUNCTION(NUMBER_OF_GRID_POINTS))*(WAVEFUNCTION(1)-CMPLX(2.0E0,0.0E0)*WAVEFUNCTION(NUMBER_OF_GRID_POINTS)+WAVEFUNCTION(NUMBER_OF_GRID_POINTS-1)))
         ENERGY = -0.5E0*ENERGY/(RADIUS**2*ANGULAR_GRID_SPACING_SIZE**2)
         ENERGY = ENERGY+REAL(CMPLX(0.0E0,0.5E0*ROTATION_RATE/ANGULAR_GRID_SPACING_SIZE)*CONJG(WAVEFUNCTION(1))*(WAVEFUNCTION(2)-WAVEFUNCTION(NUMBER_OF_GRID_POINTS)))
         DO CURRENT_GRID_POINT = 2, NUMBER_OF_GRID_POINTS-1
            ENERGY = ENERGY+REAL(CMPLX(0.0E0,0.5E0*ROTATION_RATE/ANGULAR_GRID_SPACING_SIZE)*CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*(WAVEFUNCTION(CURRENT_GRID_POINT+1)-WAVEFUNCTION(CURRENT_GRID_POINT-1)))
         ENDDO
         ENERGY = ENERGY+REAL(CMPLX(0.0E0,0.5E0*ROTATION_RATE/ANGULAR_GRID_SPACING_SIZE)*CONJG(WAVEFUNCTION(NUMBER_OF_GRID_POINTS))*(WAVEFUNCTION(1)-WAVEFUNCTION(NUMBER_OF_GRID_POINTS-1)))
         DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
            ENERGY = ENERGY+REAL(CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*EXTERNAL_POTENTIAL(CURRENT_GRID_POINT)*WAVEFUNCTION(CURRENT_GRID_POINT))
         ENDDO
         DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
            ENERGY = ENERGY+REAL(CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*CMPLX(0.5E0,0.0E0)*NONLINEAR_COUPLING(CURRENT_GRID_POINT)*WAVEFUNCTION(CURRENT_GRID_POINT)*WAVEFUNCTION(CURRENT_GRID_POINT))
         ENDDO
         ENERGY = ENERGY*RADIUS*ANGULAR_GRID_SPACING_SIZE
         ANGULAR_MOMENTUM = 0.0E0
         ANGULAR_MOMENTUM = ANGULAR_MOMENTUM+REAL(CONJG(WAVEFUNCTION(1))*CMPLX(0.0E0,-0.5E0/ANGULAR_GRID_SPACING_SIZE)*(WAVEFUNCTION(2)-WAVEFUNCTION(NUMBER_OF_GRID_POINTS)))
         DO CURRENT_GRID_POINT = 2, NUMBER_OF_GRID_POINTS-1
            ANGULAR_MOMENTUM = ANGULAR_MOMENTUM+REAL(CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*CMPLX(0.0E0,-0.5E0/ANGULAR_GRID_SPACING_SIZE)*(WAVEFUNCTION(CURRENT_GRID_POINT+1)-WAVEFUNCTION(CURRENT_GRID_POINT-1)))
         ENDDO
         ANGULAR_MOMENTUM = ANGULAR_MOMENTUM+REAL(CONJG(WAVEFUNCTION(NUMBER_OF_GRID_POINTS))*CMPLX(0.0E0,-0.5E0/ANGULAR_GRID_SPACING_SIZE)*(WAVEFUNCTION(1)-WAVEFUNCTION(NUMBER_OF_GRID_POINTS-1)))
         ANGULAR_MOMENTUM = ANGULAR_MOMENTUM*RADIUS*ANGULAR_GRID_SPACING_SIZE
         ANGULAR_POSITION = 0.0E0
         DO CURRENT_GRID_POINT = 1, NUMBER_OF_GRID_POINTS
            ANGULAR_POSITION = ANGULAR_POSITION+REAL(CONJG(WAVEFUNCTION(CURRENT_GRID_POINT))*CMPLX(FLOAT(CURRENT_GRID_POINT-1)*ANGULAR_GRID_SPACING_SIZE,0.0E0)*WAVEFUNCTION(CURRENT_GRID_POINT))
         ENDDO
         ANGULAR_POSITION = ANGULAR_POSITION*RADIUS*ANGULAR_GRID_SPACING_SIZE
         WRITE(6,900) FLOAT(CURRENT_TIME_STEP-1)*TIME_STEP_SIZE, L2NORM, ENERGY, ANGULAR_MOMENTUM, ANGULAR_POSITION
         CURRENT_FILE = CURRENT_FILE + 1
      ENDDO

!     Format Statements:
!     ------------------
900   FORMAT(1X,5(F23.15))

!     Deallocate Arrays:
!     ------------------
      DEALLOCATE(WAVEFUNCTION)
      DEALLOCATE(EXTERNAL_POTENTIAL)
      DEALLOCATE(NONLINEAR_COUPLING)

      STOP
      ENDPROGRAM EXPECTATION

